// The SCSS is enabled as the CSS preprocessor

// Layout variables & mixins
$column: 6.25%;

@mixin width($number) {
  width: #{$number * $column};
}

@mixin offset($number) {
  margin-left: #{$number * $column};
}

// Fonts
$font-meta: "ff-meta-serif-web-pro", Georgia, serif;
$font-korolev: "korolev", sans-serif;

// Colours
$red: #f7412d;

// Variables
$base-font-size: 112.5; // Gets used as %, converts to 18px
$line-height: 1.45;
$base: ($base-font-size / 100); // We'll need this for some calculations

// Modular scale
$ratio: 1.5; // Perfect Fifth

// pow and ms functions
@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number; //Multiply by $number if exponent less than zero
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: $value / $number; //Divide by $number if exponent less than zero
    }
  }

  @return $value;
}

@function ms($value, $ms-ratio: $ratio, $ms-base: $base) {
  $size: pow($ms-ratio, $value) * $ms-base;
  @return #{$size + "rem"};
}

// Vertical rhythm mixins
@mixin line-height($number) {
  line-height: #{$number * $line-height + "rem"};
}

@mixin margin-top($number) {
  margin-top: #{$number * $line-height + "rem"};
}

@mixin margin-bottom($number) {
  margin-bottom: #{$number * $line-height + "rem"};
}

html {
  font-size: #{$base-font-size + "%"}; // 112.5% = 18 pixels
  font-family: $font-meta;
  color: #333;
}

// Set line-height and margins for all elements
* {
  @include line-height(1);
  @include margin-bottom(1);
  @include margin-top(0);
}

// [ h1: font-size: [x value from scale], line-height: 2 * 30px, margin-top: 2 * 30px, margin-bottom: 1 * 30px ]
$headings: (
  h1: (
    3,
    3,
    1,
    1,
  ),
  h2: (
    1,
    1.5,
    2,
    0.5,
  ),
  h3: (
    0,
    1.5,
    2,
    0.5,
  ),
  h4: (
    0,
    0,
    0.25,
    0,
  ),
  h5: (
    0,
    2.5,
    0.5,
    0,
  ),
  h6: (
    0,
    2.5,
    0.5,
    0,
  ),
);

// Set line-heights and margins for headings
@each $heading, $properties in $headings {
  #{$heading} {
    font-size: ms(nth($properties, 1));
    @include line-height(nth($properties, 2));
    @include margin-top(nth($properties, 3));
    @include margin-bottom(nth($properties, 4));
  }
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: $font-korolev;
  font-weight: 500;
}

.main-body {
  @include width(9);
  @include offset(2);
  float: left;
}

.post-meta {
  color: #999;

  a {
    color: #999;
    text-decoration: underline;
  }
}

.sidebar {
  @include width(3);
  @include margin-top(2);
  @include offset(1);
  float: left;

  h1 {
    text-transform: uppercase;
    font-size: ms(0);
    @include margin-bottom(0);
  }

  ul {
    list-style: none;
    padding: 0;
  }

  a {
    font-family: $font-korolev;
    display: block;
    @include margin-bottom(0);
  }

  .carbon {
    max-width: 265px;
  }
}

header {
  @include margin-top(2);
  @include margin-bottom(1);
  font-family: $font-korolev;
}

.main-nav {
  ul {
    list-style: none;
  }

  li {
    display: inline-block;
    margin-right: 20px;
  }
}

.logo-wrap {
  text-transform: uppercase;
  font-size: ms(0);
  display: inline;
  float: left;
  margin-right: 40px;
}

.logo {
  max-width: 48px;
  float: left;
}

small,
figcaption {
  font-size: ms(-1);
}

.big-quote {
  font-family: $font-korolev;
  font-size: ms(1);
  float: right;
  max-width: 10em;
  font-weight: 300;
  font-style: italic;
  @include line-height(1.5);
}

article {
  h1 {
    font-style: normal;
    max-width: 13em;
    @include offset(-2);
  }

  p {
    max-width: 33em;
  }

  img {
    max-width: 100%;
  }
}

a {
  color: $red;
  text-decoration: none;

  &:hover {
    color: lighten($red, 10%);
  }

  &:active {
    color: lighten($red, 20%);
  }
}

.twitter-link {
  font-family: $font-korolev;
}

/* End of example */

footer {
  margin-top: 4em;
}

footer h1 {
  font-size: 24px;
  font-family: "acumin-pro-extra-condensed", sans-serif;
  margin-bottom: 0;
}

footer span {
  color: #f15d64;
}

footer p {
  font-size: 16px;
  font-family: Georgia, serif;
}

// Apply the baseline grid as background
.grid {
  background-image: linear-gradient(
    to bottom,
    hsla(200, 100%, 50%, 0.3) 1px,
    transparent 1px
  );
  background-repeat: repeat;
  background-position: left top;
  background-size: 100% #{($base-font-size / 100 * 16) * $line-height + "px"};
}

.double-grid {
  @extend .grid;
  background-image: linear-gradient(
      to bottom,
      hsla(200, 100%, 50%, 0.3) 1px,
      transparent 1px
    ),
    linear-gradient(
      to bottom,
      hsla(200, 100%, 50%, 0.3) 1px,
      transparent 1px,
      transparent #{0.5 * ($base-font-size / 100 * 16) * $line-height + "px"},
      hsla(200, 100%, 50%, 0.2) #{0.5 * ($base-font-size / 100 * 16) *
        $line-height + "px"},
      transparent #{0.5 * ($base-font-size / 100 * 16) * $line-height + 1 + "px"},
      transparent #{($base-font-size / 100 * 16) * $line-height + "px"}
    );
}
